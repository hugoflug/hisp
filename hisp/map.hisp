(import "core" ())

(defn new-node
  (& elems)
  (new "map" elems))

(defn insert
  (key value map)
  (let (node (unwrap map))
    (if (empty? node)
      (new-node (: key value) () ())
      (let 
        ((elem left right) node
        (key' _) elem)
          (ifs 
            (= key key') (new-node (: key value) left right)
            (< key key') (new-node elem (insert key value left) right)
            (> key key') (new-node elem left (insert key value right))
            (error "insert: Internal error"))))))

(defn lookup
  (key map)
  (let (node (unwrap map))
    (if (empty? node)
      nil
      (let 
        ((elem left right) node
        (key' value) elem)
          (ifs
            (= key key') value
            (< key key') (lookup key left)
            (> key key') (lookup key right)
            (error "lookup: Internal error"))))))

(defn mmap'
  (pairs)
  (if (empty? pairs)
    (new-node)
    (let
      ((key value) (head pairs))
        (insert key value (mmap' (tail pairs))))))
(defn mmap
  (& args)
  (mmap' (split-in-pairs args)))

(impl reduce 
  ((f nil) (start nil) (struct "map"))
  (if (empty? (unwrap struct)) 
    start
    (let (
      (elem left right) (unwrap struct)
       lred (if (empty? (unwrap left)) start (reduce f start left))
       nred (f lred elem))
        (if (empty? (unwrap right)) nred (reduce f nred right)))))
(assert-equal 
  (reduce (fn (a b) (cons b a)) () (mmap 1 2  3 4))
  (: (: 3 4) (: 1 2)))
