(def defmacro 
  (set-macro true (fn (name args body) 
    (' (def (~ name) (set-macro true (fn (~ args) (~ body))))))))

(defmacro defn
  (name args body) 
  (' (def (~ name) (fn (~ args) (~ body)))) )

(defn assert-equal
  (a b)
  (if (= a b)
    nil
    (error (str a " was not equal to " b))))

(defn list (& l) l)
(assert-equal (list 1 2 3) (' (1 2 3)))
(assert-equal (list) (' ()))

(defn do (& l) nil)
(assert-equal (do 1 2 3) nil)

(defn map
  (f list)
  (if (= list ())
    ()
    (cons 
      (f (head list))
      (map f (tail list)))))

(defn filter
  (f list)
  (if (= list ())
    ()
    (if (f (head list)) 
      (cons (head list) (filter f (tail list)))
      (filter f (tail list)))))

(defn reduce
  (f val list)
  (if (= list ())
    val
    (reduce f (f val (head list)) (tail list))))
(assert-equal (reduce + 7 (list 1 2 3)) 13)

(defn split-in-pairs'
  (l last)
  (if (= l ())
    (if (= last nil)
      ()
      (error "split-in-pairs: list was not a length divisible by 2"))
    (if (= last nil)
      (split-in-pairs' (tail l) (head l))
      (cons (list last (head l)) (split-in-pairs' (tail l) nil)))))
(defn split-in-pairs
  (l)
  (split-in-pairs' l nil))
(assert-equal (split-in-pairs (list 1 2 3 4)) (list (list 1 2) (list 3 4)))

(defn let'
  (bindings body)
    (cons
      (' (fn
        (~ (map head bindings))
        (~ body)))
      (map
        (fn (bnd) (head (tail bnd)))
        bindings)))
(defmacro let
  (bindings body)
    (let' (split-in-pairs bindings) body))

(defn or
  (a b)
  (nand (nand a a) (nand b b)))
(assert-equal (or false false) false)
(assert-equal (or false true) true)
(assert-equal (or true false) true)
(assert-equal (or true true) true)

(defn reverse' (l reverted)
  (if (= l ())
    reverted
    (reverse' (tail l) (cons (head l) reverted))))
(defn reverse 
  (l)
  (reverse' l ()))
(assert-equal (reverse (list 1 2 3)) (list 3 2 1))

(defn split-on'
  (s c splits curr)
  (if (= s ())
    (reverse (cons (apply str (reverse curr)) splits))
    (if (= (head s) c)
      (split-on' (tail s) c (cons (apply str (reverse curr)) splits) (' ()))
      (split-on' (tail s) c splits (cons (head s) curr)))))
(defn split-on
  (s c)
  (split-on' (split s) c () ()))
(assert-equal (split-on "a,b,c" ",") (list "a" "b" "c"))
(assert-equal (split-on "ax,bx,cx" ",") (list "ax" "bx" "cx"))

(defn take 
  (n l)
  (if (or (= n 0) (= l ()))
      ()
      (cons (head l) (take (- n 1) (tail l)))))
(assert-equal (take 3 (list 1 2 3 4 5)) (list 1 2 3))
(assert-equal (take 3 (list 1 2)) (list 1 2))
(assert-equal (take 3 (list)) (list))

(defn drop 
  (n l)
  (if (= n 0)
    l
    (if (= l ())
      ()
      (drop (- n 1) (tail l)))))
(assert-equal (drop 3 (list 1 2 3 4 5)) (list 4 5))
(assert-equal (drop 3 (list 1 2)) (list))
(assert-equal (drop 3 (list)) (list))

(defn snoc 
  (elem l)
  (if (= l ())
    (list elem)
    (cons (head l) (snoc elem (tail l)))))
(assert-equal (snoc 3 (list 1 2)) (list 1 2 3))
(assert-equal (snoc 3 (list)) (list 3))

(defmacro expand-macro
  (fncall)
  (cons 
    (set-macro false (eval (head fncall))) 
    (map (fn (arg) (' (' (~ arg)))) (tail fncall))))
(assert-equal (expand-macro (let (a 7 b 9) a)) (' ((fn (a b) a) 7 9)))
(assert-equal (expand-macro (defn foo (a) a)) (' (def foo (fn (a) a))))

(defn case'
  (scrutinee case-pairs)
  (' 
    (if (= (~ scrutinee) (~ (head (head case-pairs))))
      (~ (head (tail (head case-pairs))))
      (~ (if (= (tail case-pairs) ())
        nil
        (case' scrutinee (tail case-pairs)))))))
(defmacro case
  (scrutinee & cases)
  (case' scrutinee (split-in-pairs cases)))
(assert-equal 
  (expand-macro 
    (case scrutinee
      5 "a" 
      6 "b" 
      7 "c"))
  (' 
    (if (= scrutinee 5) 
      "a" 
      (if (= scrutinee 6) 
        "b" 
        (if (= scrutinee 7)
        "c" 
          (~ nil))))))

(defn parse-digit
  (s)
  (case s
    "0" 0
    "1" 1
    "2" 2
    "3" 3
    "4" 4
    "5" 5
    "6" 6
    "7" 7
    "8" 8
    "9" 9))
(assert-equal (parse-digit "8") 8)
(defn parse-int'
  (l)
  (if (= l ())
    0
    (+
      (head l)
      (* 10 (parse-int' (tail l))))))
(defn parse-int
  (s)
  (parse-int' (reverse (map parse-digit (split s)))))
(assert-equal (parse-int "873") 873)
(assert-equal (parse-int "901") 901)
(assert-equal (parse-int "0") 0)