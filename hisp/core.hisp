(def defmacro 
  (macro (name args body) 
    (eval (' (def (~ name) (macro (~ args) (~ body)))))))

(defmacro defn
  (name args body) 
  (eval (' (def (~ name) (fn (~ args) (~ body)))) ))

(defn map
  (f list)
  (if (= list ())
    ()
    (cons 
      (f (head list))
      (map f (tail list)))))

(defn filter
  (f list)
  (if (= list ())
    ()
    (if (f (head list)) 
      (cons (head list) (filter f (tail list)))
      (filter f (tail list)))))

(defmacro let
  (bindings body)
    (eval (cons
      (' (fn
        (~ (map (fn (bnd) (head bnd)) bindings))
        (~ body)))
      (map
        (fn (bnd) (head (tail bnd)))
        bindings))))