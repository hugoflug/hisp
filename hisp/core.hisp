(def defmacro 
  (macro (name args body) 
    (' (def (~ name) (macro (~ args) (~ body))))))

(defmacro defn
  (name args body) 
  (' (def (~ name) (fn (~ args) (~ body)))) )

(defn map
  (f list)
  (if (= list ())
    ()
    (cons 
      (f (head list))
      (map f (tail list)))))

(defn filter
  (f list)
  (if (= list ())
    ()
    (if (f (head list)) 
      (cons (head list) (filter f (tail list)))
      (filter f (tail list)))))

(defn reduce
  (f val list)
  (if (= list ())
    val
    (reduce f (f val (head list)) (tail list))))

(defmacro let
  (bindings body)
    (cons
      (' (fn
        (~ (map head bindings))
        (~ body)))
      (map
        (fn (bnd) (head (tail bnd)))
        bindings)))

(defn assert-equal
  (a b)
  (if (= a b)
    nil
    (error (str a " was not equal to " b))))

(defn reverse' (l reverted)
  (if (= l ())
    reverted
    (reverse' (tail l) (cons (head l) reverted))))

(defn reverse 
  (l)
  (reverse' l ()))

(defn split-on'
  (s c splits curr)
  (if (= s ())
    (reverse (cons (apply str curr) splits))
    (if (= (head s) c)
      (split-on' (tail s) c (cons (apply str curr) splits) (' ()))
      (split-on' (tail s) c splits (cons (head s) curr)))))

(defn split-on
  (s c)
  (split-on' (split s) c () ()))

(assert-equal (split-on "a,b,c" ",") (' ("a" "b" "c")))